"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const path = require("path");
const util_1 = require("../../util");
function normalizeOptions(tree, options) {
    const name = (0, devkit_1.names)(options.name).fileName;
    const projectDirectory = options.directory
        ? `${(0, devkit_1.names)(options.directory).fileName}/${name}`
        : name;
    const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const projectRoot = `${(0, devkit_1.getWorkspaceLayout)(tree).appsDir}/${projectDirectory}`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    return Object.assign(Object.assign({}, options), { projectName,
        projectRoot,
        projectDirectory,
        parsedTags });
}
function addFiles(tree, options) {
    const templateOptions = Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.name)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.projectRoot), template: '' });
    console.log(templateOptions);
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, 'files'), options.projectRoot, templateOptions);
    (0, util_1.createGoMod)(tree, options);
    (0, util_1.updateGoWork)(tree, options);
}
function default_1(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = normalizeOptions(tree, options);
        (0, devkit_1.addProjectConfiguration)(tree, normalizedOptions.projectName, {
            root: normalizedOptions.projectRoot,
            projectType: 'application',
            sourceRoot: `${normalizedOptions.projectRoot}`,
            targets: {
                build: {
                    executor: '@nx-golang/gin:build',
                    options: {
                        outputPath: (0, util_1.toPosixPath)(path.join(path.normalize('dist'), normalizedOptions.projectRoot)),
                        main: (0, util_1.toPosixPath)(path.join(normalizedOptions.projectRoot, 'main.go')),
                    },
                },
                serve: {
                    executor: '@nx-go/nx-go:serve',
                    options: {
                        main: (0, util_1.toPosixPath)(path.join(normalizedOptions.projectRoot, 'main.go')),
                    },
                },
                test: {
                    executor: '@nx-go/nx-go:test',
                },
                lint: {
                    executor: '@nx-golang/gin:lint',
                },
            },
            tags: normalizedOptions.parsedTags,
        });
        addFiles(tree, normalizedOptions);
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = default_1;
//# sourceMappingURL=generator.js.map